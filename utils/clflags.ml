(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* Command-line parameters *)

soit objfiles = ref ([] : string list)   (* .cmo and .cma files *)
et ccobjs = ref ([] : string list)     (* .o, .a, .so and -cclib -lxxx *)
et dllibs = ref ([] : string list)     (* .so and -dllib -lxxx *)

soit compile_only = ref faux            (* -c *)
et output_name = ref (None : string option) (* -o *)
et include_dirs = ref ([] : string list)(* -I *)
et no_std_include = ref faux          (* -nostdlib *)
et print_types = ref faux             (* -i *)
et make_archive = ref faux            (* -a *)
et debug = ref faux                   (* -g *)
et fast = ref faux                    (* -unsafe *)
et link_everything = ref faux         (* -linkall *)
et custom_runtime = ref faux          (* -custom *)
et bytecode_compatible_32 = ref faux  (* -compat-32 *)
et output_c_object = ref faux         (* -output-obj *)
et all_ccopts = ref ([] : string list)     (* -ccopt *)
et classic = ref faux                 (* -nolabels *)
et nopervasives = ref faux            (* -nopervasives *)
et preprocessor = ref(None : string option) (* -pp *)
et all_ppx = ref ([] : string list)        (* -ppx *)
soit annotations = ref faux             (* -annot *)
soit binary_annotations = ref faux      (* -annot *)
et use_threads = ref faux             (* -thread *)
et use_vmthreads = ref faux           (* -vmthread *)
et noassert = ref faux                (* -noassert *)
et verbose = ref faux                 (* -verbose *)
et noprompt = ref faux                (* -noprompt *)
et nopromptcont = ref faux            (* -nopromptcont *)
et init_file = ref (None : string option)   (* -init *)
et noinit = ref faux                  (* -noinit *)
et use_prims = ref ""                  (* -use-prims ... *)
et use_runtime = ref ""                (* -use-runtime ... *)
et principal = ref faux               (* -principal *)
et real_paths = ref vrai               (* -short-paths *)
et recursive_types = ref faux         (* -rectypes *)
et strict_sequence = ref faux         (* -strict-sequence *)
et applicative_functors = ref vrai     (* -no-app-funct *)
et make_runtime = ref faux            (* -make-runtime *)
et gprofile = ref faux                (* -p *)
et c_compiler = ref (None: string option) (* -cc *)
et no_auto_link = ref faux            (* -noautolink *)
et dllpaths = ref ([] : string list)   (* -dllpath *)
et make_package = ref faux            (* -pack *)
et for_package = ref (None: string option) (* -for-pack *)
et error_size = ref 500                (* -error-size *)
et transparent_modules = ref faux     (* -trans-mod *)
soit dump_source = ref faux             (* -dsource *)
soit dump_parsetree = ref faux          (* -dparsetree *)
et dump_typedtree = ref faux          (* -dtypedtree *)
et dump_rawlambda = ref faux          (* -drawlambda *)
et dump_lambda = ref faux             (* -dlambda *)
et dump_clambda = ref faux            (* -dclambda *)
et dump_instr = ref faux              (* -dinstr *)

soit keep_asm_file = ref faux           (* -S *)
soit optimize_for_speed = ref vrai       (* -compact *)

et dump_cmm = ref faux                (* -dcmm *)
soit dump_selection = ref faux          (* -dsel *)
soit dump_live = ref faux               (* -dlive *)
soit dump_spill = ref faux              (* -dspill *)
soit dump_split = ref faux              (* -dsplit *)
soit dump_interf = ref faux             (* -dinterf *)
soit dump_prefer = ref faux             (* -dprefer *)
soit dump_regalloc = ref faux           (* -dalloc *)
soit dump_reload = ref faux             (* -dreload *)
soit dump_scheduling = ref faux         (* -dscheduling *)
soit dump_linear = ref faux             (* -dlinear *)
soit keep_startup_file = ref faux       (* -dstartup *)
soit dump_combine = ref faux            (* -dcombine *)

soit native_code = ref faux             (* set to true under ocamlopt *)
soit inline_threshold = ref 10
soit force_slash = ref faux             (* for ocamldep *)

soit dont_write_files = ref faux        (* set to true under ocamldoc *)

soit std_include_flag prefix =
  si !no_std_include alors ""
  sinon (prefix ^ (Filename.quote Config.standard_library))
;;

soit std_include_dir () =
  si !no_std_include alors [] sinon [Config.standard_library]
;;

soit shared = ref faux (* -shared *)
soit dlcode = ref vrai (* not -nodynlink *)

soit runtime_variant = ref "";;      (* -runtime-variant *)

soit keep_locs = ref faux              (* -keep-locs *)

soit perfide_albion = ref faux (* -perfide-albion *)
